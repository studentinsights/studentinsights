name: Student Insights CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
  js_build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2    

    # During service outage, ignore specific node version
    # see https://github.com/actions/setup-node/issues/132#issuecomment-609877619
    # and https://github.com/nodejs/node/issues/32683
    # - name: Setup node.js
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: 12.15.0

    # Based on https://github.com/actions/cache/blob/master/examples.md#node---yarn
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup node_modules caching
      uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # It's okay that the lockfile is linted after `yarn install` since the point
    # is to protect the production environment, not the CI environment.
    - name: Install packages
      run: |
        ./scripts/ci/detect_package_lock.sh
        yarn install --check-files
        yarn yarn-checks-cli
        yarn lockfile-lint-cli

    - name: Audits
      run: yarn audits-cli

    - name: Lint
      run: yarn lint-cli

    - name: Jest
      run: |
        export TZ=UTC
        yarn jest

    - name: Storybook
      run: yarn storybook-cli


  # Based on Ruby starter action
  # Postgres setup based on https://help.github.com/en/actions/configuring-and-managing-workflows/creating-postgresql-service-containers
  ruby_build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:11
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 1s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: student_insights_test_ci_password
        ports:
          - 5432:5432

    # RSpec dominates the test run, so shard and parallelize
    strategy:
      fail-fast: false
      matrix:
        rspec_shard: [0,1,2,3,4,5,6,7]
        rspec_total_shards: [8]

    # This is for Rails steps below, and has to match the Postgres service config above
    env:
      RAILS_ENV: test
      DATABASE_URL: postgresql://postgres:student_insights_test_ci_password@localhost:5432
      RSPEC_SHARD: ${{ matrix.rspec_shard }}
      RSPEC_TOTAL_SHARDS: ${{ matrix.rspec_total_shards }}

    steps:
    - uses: actions/checkout@v2

    # Uses https://github.com/ruby/setup-ruby since it's more responsive compared to
    # GitHub's action, which hadn't released 2.6.6 support a week later.
    - name: Read .ruby-version
      run: echo "::set-output name=file-contents::$(cat .ruby-version)"
      id: ruby-version
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: "${{ steps.ruby-version.outputs.file-contents }}"

    # Disabled since service is unreliable, see https://github.com/actions/cache/issues/207#issuecomment-625399526
    # Based on https://github.com/actions/cache/blob/master/examples.md#ruby---bundler
    # - name: Setup gem caching
    #   uses: actions/cache@v1
    #   with:
    #     path: vendor/bundle
    #     key: ${{ runner.os }}-gem-cache-${{ hashFiles('**/Gemfile.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-gem-cache-

    # There's a bug in sassc, and the workaround below is from https://github.com/sass/sassc-ruby/issues/146#issuecomment-603280723
    - name: Install gems
      run: |
        gem install bundler
        # bundle config path vendor/bundle # to find cache, disabled see # Disabled since service is unreliable, see https://github.com/actions/cache/issues/207#issuecomment-625399526
        bundle config set deployment 'true'
        bundle config build.sassc --disable-march-tune-native # https://github.com/sass/sassc-ruby/issues/146
        bundle install --jobs 4 --retry 3 # 4 parallel jobs recommended by GitHub template

    - name: Setup Postgres
      run: |
        bundle exec rake db:create
        bundle exec rake db:migrate
        bundle exec rake db:test:prepare
        bundle exec rake immigrant:check_keys

    - name: Audits
      run: |
        bundle exec ruby-audit check
        bundle exec bundle-audit check --update
        bundle exec rails_best_practices -c config/rails_best_practices.yml

    - name: Code checks
      run: |
        bin/rails zeitwerk:check
        bundle exec rubocop
        bundle exec brakeman --run-all-checks --exit-on-warn --ensure-latest

    - name: Tests, sharded
      run: |
        scripts/ci/sharded_rspec.sh $RSPEC_SHARD $RSPEC_TOTAL_SHARDS

    - name: Name coverage results for shard
      run: |
        mkdir -p coverage/shards/${{ matrix.rspec_shard }}
        mv coverage/.resultset.json coverage/shards/resultset-${{ matrix.rspec_shard }}.json

    - name: Publish coverage results for shard
      uses: actions/upload-artifact@v1
      with:
        name: coverage-check-resultset
        path: coverage/shards/resultset-${{ matrix.rspec_shard }}.json

  rspec_coverage_enforcer:
    needs: ruby_build
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
    - uses: actions/checkout@v2

    # This mirrors the main ruby_build step
    - name: Read .ruby-version
      run: echo "::set-output name=file-contents::$(cat .ruby-version)"
      id: ruby-version
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: "${{ steps.ruby-version.outputs.file-contents }}"

    - name: Fetch test coverage resultset for shards
      uses: actions/download-artifact@v2-preview
      with:
        name: coverage-check-resultset
        path: coverage/shards

    - name: Enforce test coverage
      run: ruby spec/coverage_enforcer_runner.rb
      